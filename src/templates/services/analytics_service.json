{
    "// templates/services/analytics_service.json": {
        "template_id": "analytics_advanced",
        "name": "Advanced Analytics Service",
        "template_type": "service",
        "version": "1.2.0",
        "description": "Advanced analytics service for comprehensive data analysis",
        "ontology_classes": [
            "AnalyticsService",
            "DataProcessor",
            "StatisticalAnalyzer"
        ],
        "configuration": {
            "service_definition_id": "analytics_basic",
            "instance_name": "Advanced Analytics Service",
            "parameters": {
                "analytics_types": [
                    "basic_statistics",
                    "trend_analysis",
                    "correlation_analysis",
                    "outlier_detection"
                ],
                "data_window_size": 100,
                "statistical_confidence": 0.95,
                "enable_real_time": true,
                "output_format": "json"
            },
            "execution_config": {
                "timeout_seconds": 120,
                "max_retries": 3,
                "retry_delay_seconds": 5,
                "parallel_processing": true,
                "cache_results": true
            },
            "resource_limits": {
                "memory_mb": 512,
                "cpu_cores": 1.0,
                "disk_mb": 100,
                "network_bandwidth_mbps": 10
            },
            "priority": "normal",
            "auto_scaling": {
                "enabled": true,
                "min_instances": 1,
                "max_instances": 5,
                "scale_trigger": "cpu_usage > 80%"
            },
            "custom_config": {
                "enable_machine_learning": true,
                "ml_models": [
                    "anomaly_detection",
                    "pattern_recognition"
                ],
                "data_quality_checks": true
            }
        },
        "metadata": {
            "allowed_override_keys": [
                "parameters.analytics_types",
                "parameters.data_window_size",
                "parameters.statistical_confidence",
                "execution_config.timeout_seconds",
                "resource_limits.memory_mb",
                "auto_scaling.max_instances",
                "custom_config.enable_machine_learning"
            ],
            "required_keys": [
                "service_definition_id",
                "instance_name",
                "parameters.analytics_types"
            ],
            "tags": [
                "analytics",
                "statistics",
                "machine-learning",
                "real-time"
            ],
            "use_cases": [
                "Industrial data analysis",
                "IoT sensor analytics",
                "Business intelligence",
                "Predictive maintenance"
            ],
            "dependencies": [
                "data_storage_service",
                "notification_service"
            ],
            "author": "Digital Twin Platform",
            "license": "MIT"
        }
    },
    "// templates/services/prediction_service.json": {
        "template_id": "prediction_ml",
        "name": "Machine Learning Prediction Service",
        "template_type": "service",
        "version": "2.0.0",
        "description": "Advanced ML-based prediction service with multiple algorithms",
        "ontology_classes": [
            "PredictionService",
            "MachineLearningModel",
            "TimeSeriesAnalyzer"
        ],
        "configuration": {
            "service_definition_id": "prediction_linear",
            "instance_name": "ML Prediction Service",
            "parameters": {
                "model_types": [
                    "linear_regression",
                    "lstm_neural_network",
                    "random_forest",
                    "arima"
                ],
                "prediction_horizons": [
                    60,
                    300,
                    900,
                    3600
                ],
                "feature_engineering": true,
                "model_selection": "auto",
                "confidence_intervals": true,
                "ensemble_methods": true
            },
            "execution_config": {
                "timeout_seconds": 300,
                "max_retries": 2,
                "model_training_interval": 86400,
                "validation_split": 0.2,
                "cross_validation_folds": 5
            },
            "resource_limits": {
                "memory_mb": 2048,
                "cpu_cores": 2.0,
                "gpu_enabled": false,
                "disk_mb": 500
            },
            "priority": "high",
            "auto_scaling": {
                "enabled": true,
                "min_instances": 1,
                "max_instances": 3,
                "scale_trigger": "queue_length > 10"
            },
            "custom_config": {
                "model_persistence": true,
                "model_versioning": true,
                "a_b_testing": false,
                "explain_predictions": true,
                "drift_detection": true
            }
        },
        "metadata": {
            "allowed_override_keys": [
                "parameters.model_types",
                "parameters.prediction_horizons",
                "parameters.model_selection",
                "execution_config.timeout_seconds",
                "resource_limits.memory_mb",
                "resource_limits.gpu_enabled",
                "custom_config.model_persistence"
            ],
            "required_keys": [
                "service_definition_id",
                "instance_name",
                "parameters.model_types"
            ],
            "tags": [
                "prediction",
                "machine-learning",
                "time-series",
                "ensemble",
                "neural-networks"
            ],
            "use_cases": [
                "Demand forecasting",
                "Equipment failure prediction",
                "Energy consumption prediction",
                "Financial forecasting"
            ],
            "author": "Digital Twin Platform",
            "license": "MIT"
        }
    },
    "// templates/services/alerting_service.yaml": "template_id: alerting_intelligent\nname: Intelligent Alerting Service\ntemplate_type: service\nversion: 1.3.0\ndescription: Intelligent alerting service with ML-based anomaly detection\n\nontology_classes:\n  - AlertingService\n  - AnomalyDetector\n  - NotificationManager\n\nconfiguration:\n  service_definition_id: alerting_threshold\n  instance_name: Intelligent Alerting Service\n  \n  parameters:\n    alert_types:\n      - threshold_breach\n      - anomaly_detection\n      - pattern_deviation\n      - trend_reversal\n    \n    notification_channels:\n      - email\n      - webhook\n      - sms\n      - slack\n      - teams\n    \n    severity_levels:\n      - info\n      - warning\n      - critical\n      - emergency\n    \n    intelligent_features:\n      - auto_threshold_adjustment\n      - false_positive_reduction\n      - alert_correlation\n      - escalation_policies\n  \n  execution_config:\n    timeout_seconds: 30\n    max_retries: 5\n    check_interval_seconds: 10\n    batch_processing: true\n    deduplication_window: 300\n  \n  resource_limits:\n    memory_mb: 256\n    cpu_cores: 0.5\n    disk_mb: 50\n  \n  priority: high\n  \n  auto_scaling:\n    enabled: true\n    min_instances: 2\n    max_instances: 10\n    scale_trigger: \"alert_volume > 100/minute\"\n  \n  custom_config:\n    ml_anomaly_detection: true\n    learning_period_days: 7\n    sensitivity_auto_tune: true\n    alert_fatigue_prevention: true\n    business_hours_awareness: true\n    maintenance_mode_support: true\n\nmetadata:\n  allowed_override_keys:\n    - parameters.alert_types\n    - parameters.notification_channels\n    - parameters.severity_levels\n    - execution_config.check_interval_seconds\n    - resource_limits.memory_mb\n    - auto_scaling.max_instances\n    - custom_config.ml_anomaly_detection\n    - custom_config.sensitivity_auto_tune\n  \n  required_keys:\n    - service_definition_id\n    - instance_name\n    - parameters.alert_types\n    - parameters.notification_channels\n  \n  tags:\n    - alerting\n    - monitoring\n    - anomaly-detection\n    - intelligent\n    - machine-learning\n  \n  use_cases:\n    - Industrial monitoring\n    - IT infrastructure monitoring\n    - IoT device monitoring\n    - Business process monitoring\n  \n  integrations:\n    - prometheus\n    - grafana\n    - elasticsearch\n    - datadog\n  \n  author: Digital Twin Platform\n  license: MIT",
    "// templates/services/optimization_service.json": {
        "template_id": "optimization_advanced",
        "name": "Advanced Optimization Service",
        "template_type": "service",
        "version": "1.1.0",
        "description": "Multi-objective optimization service for complex systems",
        "ontology_classes": [
            "OptimizationService",
            "MultiObjectiveOptimizer",
            "ConstraintSolver"
        ],
        "configuration": {
            "service_definition_id": "optimization_genetic",
            "instance_name": "Advanced Optimization Service",
            "parameters": {
                "optimization_algorithms": [
                    "genetic_algorithm",
                    "particle_swarm",
                    "simulated_annealing",
                    "gradient_descent"
                ],
                "objective_types": [
                    "minimize_cost",
                    "maximize_efficiency",
                    "minimize_energy",
                    "maximize_throughput"
                ],
                "constraint_handling": true,
                "multi_objective": true,
                "real_time_optimization": false,
                "solution_quality": "high"
            },
            "execution_config": {
                "timeout_seconds": 600,
                "max_iterations": 1000,
                "convergence_tolerance": 0.001,
                "population_size": 100,
                "elite_preservation": 0.1
            },
            "resource_limits": {
                "memory_mb": 1024,
                "cpu_cores": 4.0,
                "disk_mb": 200,
                "gpu_enabled": true
            },
            "priority": "normal",
            "auto_scaling": {
                "enabled": false,
                "min_instances": 1,
                "max_instances": 1
            },
            "custom_config": {
                "parallel_execution": true,
                "result_visualization": true,
                "sensitivity_analysis": true,
                "what_if_scenarios": true,
                "solution_caching": true
            }
        },
        "metadata": {
            "allowed_override_keys": [
                "parameters.optimization_algorithms",
                "parameters.objective_types",
                "parameters.multi_objective",
                "execution_config.timeout_seconds",
                "execution_config.max_iterations",
                "resource_limits.cpu_cores",
                "resource_limits.gpu_enabled",
                "custom_config.parallel_execution"
            ],
            "required_keys": [
                "service_definition_id",
                "instance_name",
                "parameters.optimization_algorithms",
                "parameters.objective_types"
            ],
            "tags": [
                "optimization",
                "multi-objective",
                "genetic-algorithm",
                "constraint-solving",
                "high-performance"
            ],
            "use_cases": [
                "Production scheduling",
                "Resource allocation",
                "Energy management",
                "Supply chain optimization",
                "Process parameter tuning"
            ],
            "performance_requirements": {
                "max_response_time_seconds": 600,
                "min_solution_quality": 0.9,
                "max_memory_usage_gb": 1
            },
            "author": "Digital Twin Platform",
            "license": "MIT"
        }
    },
    "// templates/ontologies/service_ontology.json": {
        "name": "Service_Ontology",
        "version": "1.0.0",
        "namespace": "http://digitaltwin.platform/ontology/service#",
        "description": "Ontology for services and service management in Digital Twin environments",
        "classes": [
            {
                "name": "Service",
                "uri": "http://digitaltwin.platform/ontology/service#Service",
                "description": "Base class for all services in the platform",
                "parent_classes": [],
                "properties": [
                    {
                        "name": "serviceId",
                        "property_type": "datatype",
                        "range_type": "string",
                        "description": "Unique identifier for the service",
                        "constraints": {
                            "required": true,
                            "pattern": "^[a-zA-Z0-9_-]+$"
                        }
                    },
                    {
                        "name": "serviceName",
                        "property_type": "datatype",
                        "range_type": "string",
                        "description": "Human-readable name of the service",
                        "constraints": {
                            "required": true
                        }
                    },
                    {
                        "name": "serviceType",
                        "property_type": "datatype",
                        "range_type": "string",
                        "description": "Type classification of the service",
                        "constraints": {
                            "required": true,
                            "enum": [
                                "analytics",
                                "prediction",
                                "optimization",
                                "alerting",
                                "monitoring",
                                "simulation",
                                "control"
                            ]
                        }
                    },
                    {
                        "name": "version",
                        "property_type": "datatype",
                        "range_type": "string",
                        "description": "Service version",
                        "constraints": {
                            "pattern": "^\\d+\\.\\d+\\.\\d+$"
                        }
                    },
                    {
                        "name": "executionMode",
                        "property_type": "datatype",
                        "range_type": "string",
                        "description": "Service execution mode",
                        "constraints": {
                            "enum": [
                                "synchronous",
                                "asynchronous",
                                "streaming",
                                "batch",
                                "scheduled"
                            ]
                        }
                    }
                ]
            },
            {
                "name": "AnalyticsService",
                "uri": "http://digitaltwin.platform/ontology/service#AnalyticsService",
                "description": "Service that performs data analytics",
                "parent_classes": [
                    "Service"
                ],
                "properties": [
                    {
                        "name": "analyticsType",
                        "property_type": "datatype",
                        "range_type": "string",
                        "description": "Type of analytics performed",
                        "constraints": {
                            "enum": [
                                "descriptive",
                                "diagnostic",
                                "predictive",
                                "prescriptive"
                            ]
                        }
                    },
                    {
                        "name": "dataWindowSize",
                        "property_type": "datatype",
                        "range_type": "integer",
                        "description": "Size of data window for analysis",
                        "constraints": {
                            "min_value": 1,
                            "max_value": 10000
                        }
                    },
                    {
                        "name": "realTimeEnabled",
                        "property_type": "datatype",
                        "range_type": "boolean",
                        "description": "Whether real-time analytics is enabled"
                    }
                ]
            },
            {
                "name": "PredictionService",
                "uri": "http://digitaltwin.platform/ontology/service#PredictionService",
                "description": "Service that makes predictions based on data",
                "parent_classes": [
                    "Service"
                ],
                "properties": [
                    {
                        "name": "modelType",
                        "property_type": "datatype",
                        "range_type": "string",
                        "description": "Type of prediction model used",
                        "constraints": {
                            "enum": [
                                "linear_regression",
                                "neural_network",
                                "random_forest",
                                "svm",
                                "time_series"
                            ]
                        }
                    },
                    {
                        "name": "predictionHorizon",
                        "property_type": "datatype",
                        "range_type": "integer",
                        "description": "Prediction horizon in seconds",
                        "constraints": {
                            "min_value": 1,
                            "max_value": 31536000
                        }
                    },
                    {
                        "name": "confidenceLevel",
                        "property_type": "datatype",
                        "range_type": "float",
                        "description": "Confidence level for predictions",
                        "constraints": {
                            "min_value": 0.0,
                            "max_value": 1.0
                        }
                    }
                ]
            },
            {
                "name": "AlertingService",
                "uri": "http://digitaltwin.platform/ontology/service#AlertingService",
                "description": "Service that monitors conditions and generates alerts",
                "parent_classes": [
                    "Service"
                ],
                "properties": [
                    {
                        "name": "alertType",
                        "property_type": "datatype",
                        "range_type": "string",
                        "description": "Type of alerting mechanism",
                        "constraints": {
                            "enum": [
                                "threshold",
                                "anomaly",
                                "pattern",
                                "trend"
                            ]
                        }
                    },
                    {
                        "name": "notificationChannels",
                        "property_type": "datatype",
                        "range_type": "string",
                        "description": "Comma-separated notification channels"
                    },
                    {
                        "name": "severityLevels",
                        "property_type": "datatype",
                        "range_type": "string",
                        "description": "Supported severity levels"
                    }
                ]
            }
        ],
        "properties": [
            {
                "name": "providesCapability",
                "property_type": "object",
                "domain": "Service",
                "range_type": "string",
                "description": "Service provides this capability"
            },
            {
                "name": "dependsOn",
                "property_type": "object",
                "domain": "Service",
                "range_type": "Service",
                "description": "Service depends on another service"
            },
            {
                "name": "processesData",
                "property_type": "object",
                "domain": "Service",
                "range_type": "DataType",
                "description": "Service processes this type of data"
            }
        ],
        "metadata": {
            "created_by": "Digital Twin Platform",
            "creation_date": "2024-01-15",
            "last_modified": "2024-01-20",
            "version_notes": "Initial service ontology with basic service classes",
            "standards_compliance": [
                "W3C OWL",
                "FAIR Principles",
                "Linked Data"
            ],
            "domain": "Service-Oriented Architecture",
            "scope": "Service management and orchestration"
        }
    }
}