{
    "info": {
        "name": "Digital Twin Smartwatch - Heart Rate Sensor (CON AUTH)",
        "description": "üîê Collezione COMPLETA con autenticazione per creare un Digital Twin smartwatch\n\nüöÄ PROCEDURA CORRETTA:\n1. üìù REGISTRA utente\n2. üîê LOGIN per ottenere token\n3. üè≠ Crea Digital Twin \n4. üîß Crea Replica (con template esistenti!)\n5. üîó Associa Replica al Twin\n6. üíì Invia dati battiti cardiaci\n\n‚ö†Ô∏è IMPORTANTE: Ogni richiesta dopo il login usa automaticamente il Bearer token!",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
        {
            "key": "base_url",
            "value": "http://localhost:8000"
        },
        {
            "key": "access_token",
            "value": ""
        },
        {
            "key": "user_id",
            "value": ""
        },
        {
            "key": "tenant_id",
            "value": ""
        },
        {
            "key": "twin_id",
            "value": ""
        },
        {
            "key": "replica_id",
            "value": ""
        }
    ],
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{access_token}}",
                "type": "string"
            }
        ]
    },
    "item": [
        {
            "name": "üîç Health Check",
            "request": {
                "auth": {
                    "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/health",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "health"
                    ]
                }
            }
        },
        {
            "name": "üìã Get API Info",
            "request": {
                "auth": {
                    "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/api/v1",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "v1"
                    ]
                }
            }
        },
        {
            "name": "1. üìù REGISTER User",
            "request": {
                "auth": {
                    "type": "noauth"
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/v1/auth/register",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "v1",
                        "auth",
                        "register"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"username\": \"smartwatch_user\",\n  \"email\": \"user@smartwatch.test\",\n  \"password\": \"SecurePass123!\",\n  \"first_name\": \"Mario\",\n  \"last_name\": \"Rossi\",\n  \"company_name\": \"SmartWatch Corp\",\n  \"plan\": \"pro\"\n}"
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "if (pm.response.code === 200 || pm.response.code === 201) {",
                            "    var response = pm.response.json();",
                            "    ",
                            "    if (response.user_id) {",
                            "        pm.collectionVariables.set('user_id', response.user_id);",
                            "        console.log('‚úÖ User registrato con ID:', response.user_id);",
                            "    }",
                            "    ",
                            "    if (response.tenant_id) {",
                            "        pm.collectionVariables.set('tenant_id', response.tenant_id);",
                            "        console.log('‚úÖ Tenant creato con ID:', response.tenant_id);",
                            "    }",
                            "    ",
                            "    if (response.tokens && response.tokens.access_token) {",
                            "        pm.collectionVariables.set('access_token', response.tokens.access_token);",
                            "        console.log('‚úÖ Token salvato automaticamente!');",
                            "    }",
                            "    ",
                            "    console.log('üéâ Registrazione completata! Ora fai il LOGIN.');",
                            "} else {",
                            "    console.log('‚ùå Errore registrazione. Status:', pm.response.code);",
                            "    console.log('Response:', pm.response.text());",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "2. üîê LOGIN User",
            "request": {
                "auth": {
                    "type": "noauth"
                },
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/v1/auth/login",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "v1",
                        "auth",
                        "login"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"username\": \"smartwatch_user\",\n  \"password\": \"SecurePass123!\"\n}"
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "if (pm.response.code === 200) {",
                            "    var response = pm.response.json();",
                            "    ",
                            "    // Salva token per tutte le richieste successive",
                            "    if (response.access_token) {",
                            "        pm.collectionVariables.set('access_token', response.access_token);",
                            "        console.log('üîê ACCESS TOKEN salvato!');",
                            "        console.log('Token:', response.access_token.substring(0, 20) + '...');",
                            "    }",
                            "    ",
                            "    // Salva info utente e tenant",
                            "    if (response.user && response.user.user_id) {",
                            "        pm.collectionVariables.set('user_id', response.user.user_id);",
                            "    }",
                            "    ",
                            "    if (response.tenant && response.tenant.tenant_id) {",
                            "        pm.collectionVariables.set('tenant_id', response.tenant.tenant_id);",
                            "    }",
                            "    ",
                            "    console.log('üéâ LOGIN SUCCESS! Ora tutte le richieste useranno automaticamente il Bearer token.');",
                            "    console.log('‚ñ∂Ô∏è Puoi procedere con \"Create Digital Twin\"');",
                            "    ",
                            "} else {",
                            "    console.log('‚ùå LOGIN FAILED. Status:', pm.response.code);",
                            "    console.log('Response:', pm.response.text());",
                            "    console.log('üí° Assicurati di aver fatto prima la REGISTRAZIONE');",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "üìã Get Available Templates",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/api/v1/replicas/templates/available",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "v1",
                        "replicas",
                        "templates",
                        "available"
                    ]
                }
            }
        },
        {
            "name": "üîç Debug - Show All Variables",
            "request": {
                "auth": {
                    "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/health",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "health"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "console.log('=== üîç DEBUG VARIABLES ===');",
                            "console.log('üîê access_token:', pm.collectionVariables.get('access_token') ? 'SET ‚úÖ' : 'MISSING ‚ùå');",
                            "console.log('üë§ user_id:', pm.collectionVariables.get('user_id') || 'MISSING ‚ùå');",
                            "console.log('üè¢ tenant_id:', pm.collectionVariables.get('tenant_id') || 'MISSING ‚ùå');",
                            "console.log('üè≠ twin_id:', pm.collectionVariables.get('twin_id') || 'MISSING ‚ùå');",
                            "console.log('üîß replica_id:', pm.collectionVariables.get('replica_id') || 'MISSING ‚ùå');",
                            "console.log('üåê base_url:', pm.collectionVariables.get('base_url'));",
                            "",
                            "console.log('=== üìù PROSSIMI PASSI ===');",
                            "if (!pm.collectionVariables.get('access_token')) {",
                            "    console.log('1Ô∏è‚É£ REGISTER User ‚Üí LOGIN User');",
                            "} else if (!pm.collectionVariables.get('twin_id')) {",
                            "    console.log('2Ô∏è‚É£ Create Digital Twin');",
                            "} else if (!pm.collectionVariables.get('replica_id')) {",
                            "    console.log('3Ô∏è‚É£ Create Replica');",
                            "} else {",
                            "    console.log('4Ô∏è‚É£ Send Heart Rate Data');",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "3. üè≠ Create Digital Twin Smartwatch",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/v1/digital-twins",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "v1",
                        "digital-twins"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"twin_type\": \"asset\",\n  \"name\": \"My Smartwatch Digital Twin\",\n  \"description\": \"Digital Twin del mio smartwatch per monitoraggio battiti cardiaci\",\n  \"capabilities\": [\n    \"monitoring\",\n    \"analytics\",\n    \"prediction\",\n    \"anomaly_detection\"\n  ],\n  \"model_configurations\": {\n    \"data_driven\": {\"enabled\": true}\n  },\n  \"data_sources\": [\n    \"heart_rate_sensor\",\n    \"accelerometer\",\n    \"gyroscope\"\n  ],\n  \"update_frequency\": 5,\n  \"quality_requirements\": {\n    \"min_quality\": 0.85,\n    \"alert_threshold\": 0.7\n  },\n  \"retention_policy\": {\n    \"retention_days\": 30,\n    \"archive_after_days\": 7\n  },\n  \"custom_config\": {\n    \"device_type\": \"smartwatch\",\n    \"sensor_types\": [\"heart_rate\", \"motion\"],\n    \"health_monitoring\": true\n  }\n}"
                }
            },
            "event": [
                {
                    "listen": "pre-request",
                    "script": {
                        "exec": [
                            "var token = pm.collectionVariables.get('access_token');",
                            "if (!token) {",
                            "    console.log('‚ùå ERRORE: access_token mancante!');",
                            "    console.log('üîÑ Fai prima LOGIN per ottenere il token');",
                            "    throw new Error('access_token mancante - fai prima il LOGIN');",
                            "} else {",
                            "    console.log('‚úÖ Token presente, procedo con la creazione del Digital Twin...');",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "if (pm.response.code === 201 || pm.response.code === 200) {",
                            "    var response = pm.response.json();",
                            "    var twinId = response.id || response.twin_id || response.entity_id;",
                            "    ",
                            "    if (twinId) {",
                            "        pm.collectionVariables.set('twin_id', twinId);",
                            "        console.log('üè≠ Digital Twin creato con ID:', twinId);",
                            "        console.log('‚ñ∂Ô∏è Ora puoi creare la Replica!');",
                            "    } else {",
                            "        console.log('‚ùå Nessun ID trovato nella risposta:', JSON.stringify(response));",
                            "    }",
                            "} else {",
                            "    console.log('‚ùå Errore creazione Digital Twin. Status:', pm.response.code);",
                            "    console.log('Response:', pm.response.text());",
                            "    ",
                            "    if (pm.response.code === 401) {",
                            "        console.log('üîê ERRORE AUTH: Token scaduto o invalido. Rifai il LOGIN!');",
                            "    }",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "4A. üîß Create Replica (template: test_iot_sensor)",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/v1/replicas",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "v1",
                        "replicas"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"replica_type\": \"sensor_aggregator\",\n  \"template_id\": \"test_iot_sensor\",\n  \"parent_digital_twin_id\": \"{{twin_id}}\",\n  \"device_ids\": [\"smartwatch-hr-001\"],\n  \"aggregation_mode\": \"real_time\",\n  \"overrides\": {\n    \"aggregation_config\": {\n      \"batch_size\": 1,\n      \"method\": \"latest\",\n      \"window_seconds\": 5\n    },\n    \"data_retention_policy\": {\n      \"retention_days\": 30\n    },\n    \"quality_thresholds\": {\n      \"min_quality\": 0.8\n    }\n  }\n}"
                }
            },
            "event": [
                {
                    "listen": "pre-request",
                    "script": {
                        "exec": [
                            "var token = pm.collectionVariables.get('access_token');",
                            "var twinId = pm.collectionVariables.get('twin_id');",
                            "",
                            "if (!token) {",
                            "    throw new Error('access_token mancante - fai LOGIN');",
                            "}",
                            "if (!twinId) {",
                            "    throw new Error('twin_id mancante - crea prima il Digital Twin');",
                            "}",
                            "",
                            "console.log('‚úÖ Creando replica con template test_iot_sensor...');"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "if (pm.response.code === 201 || pm.response.code === 200) {",
                            "    var response = pm.response.json();",
                            "    var replicaId = response.id || response.replica_id || response.entity_id;",
                            "    ",
                            "    if (replicaId) {",
                            "        pm.collectionVariables.set('replica_id', replicaId);",
                            "        console.log('üîß Replica con TEMPLATE creata con ID:', replicaId);",
                            "        console.log('‚ñ∂Ô∏è Ora puoi associarla al Twin e inviare dati!');",
                            "    }",
                            "} else {",
                            "    console.log('‚ùå Errore replica con template. Status:', pm.response.code);",
                            "    console.log('Response:', pm.response.text());",
                            "    console.log('üí° Prova la richiesta 4B (senza template)');",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "4B. üîß Create Replica (senza template)",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/v1/replicas",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "v1",
                        "replicas"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"replica_type\": \"sensor_aggregator\",\n  \"parent_digital_twin_id\": \"{{twin_id}}\",\n  \"device_ids\": [\"smartwatch-hr-001\"],\n  \"aggregation_mode\": \"real_time\",\n  \"aggregation_config\": {\n    \"window_size\": 5,\n    \"aggregation_method\": \"latest\"\n  },\n  \"data_retention_policy\": {\n    \"retention_days\": 30\n  },\n  \"quality_thresholds\": {\n    \"min_quality\": 0.8\n  }\n}"
                }
            },
            "event": [
                {
                    "listen": "pre-request",
                    "script": {
                        "exec": [
                            "var token = pm.collectionVariables.get('access_token');",
                            "var twinId = pm.collectionVariables.get('twin_id');",
                            "",
                            "if (!token) throw new Error('access_token mancante');",
                            "if (!twinId) throw new Error('twin_id mancante');",
                            "",
                            "console.log('‚úÖ Creando replica SENZA template...');"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "if (pm.response.code === 201 || pm.response.code === 200) {",
                            "    var response = pm.response.json();",
                            "    var replicaId = response.id || response.replica_id || response.entity_id;",
                            "    ",
                            "    if (replicaId) {",
                            "        pm.collectionVariables.set('replica_id', replicaId);",
                            "        console.log('üîß Replica SENZA TEMPLATE creata con ID:', replicaId);",
                            "    }",
                            "} else {",
                            "    console.log('‚ùå Errore replica senza template. Status:', pm.response.code);",
                            "    console.log('Response:', pm.response.text());",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "5. üîó Associate Replica to Twin",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/v1/digital-twins/{{twin_id}}/replicas/{{replica_id}}",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "v1",
                        "digital-twins",
                        "{{twin_id}}",
                        "replicas",
                        "{{replica_id}}"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"data_mapping\": {\n    \"heart_rate\": \"sensor_value\",\n    \"timestamp\": \"measurement_time\",\n    \"quality\": \"data_quality\"\n  },\n  \"association_type\": \"data_source\"\n}"
                }
            },
            "event": [
                {
                    "listen": "pre-request",
                    "script": {
                        "exec": [
                            "var token = pm.collectionVariables.get('access_token');",
                            "var twinId = pm.collectionVariables.get('twin_id');",
                            "var replicaId = pm.collectionVariables.get('replica_id');",
                            "",
                            "if (!token) throw new Error('access_token mancante');",
                            "if (!twinId) throw new Error('twin_id mancante');",
                            "if (!replicaId) throw new Error('replica_id mancante');",
                            "",
                            "console.log('üîó Associando Replica', replicaId, 'al Twin', twinId);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "if (pm.response.code === 201 || pm.response.code === 200) {",
                            "    console.log('üîó Associazione completata!');",
                            "    console.log('‚ñ∂Ô∏è Ora puoi inviare dati battiti cardiaci!');",
                            "} else {",
                            "    console.log('‚ùå Errore associazione. Status:', pm.response.code);",
                            "    console.log('Response:', pm.response.text());",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "6. üíì Send Heart Rate Data",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/v1/replicas/{{replica_id}}/data",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "v1",
                        "replicas",
                        "{{replica_id}}",
                        "data"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"device_id\": \"smartwatch-hr-001\",\n  \"data\": {\n    \"timestamp\": \"{{$isoTimestamp}}\",\n    \"value\": {{heart_rate}},\n    \"unit\": \"bpm\",\n    \"quality\": {{data_quality}},\n    \"dataType\": \"heart_rate\",\n    \"sensor_type\": \"optical_ppg\",\n    \"measurement_context\": {\n      \"activity_level\": \"{{activity_level}}\",\n      \"user_state\": \"awake\"\n    }\n  },\n  \"metadata\": {\n    \"battery_level\": {{battery_level}},\n    \"signal_strength\": \"strong\",\n    \"firmware_version\": \"1.2.3\"\n  }\n}"
                }
            },
            "event": [
                {
                    "listen": "pre-request",
                    "script": {
                        "exec": [
                            "var token = pm.collectionVariables.get('access_token');",
                            "var replicaId = pm.collectionVariables.get('replica_id');",
                            "",
                            "if (!token) throw new Error('access_token mancante');",
                            "if (!replicaId) throw new Error('replica_id mancante');",
                            "",
                            "// Genera battiti cardiaci realistici (60-100 bpm)",
                            "var activities = ['resting', 'walking', 'light_exercise'];",
                            "var activity = activities[Math.floor(Math.random() * activities.length)];",
                            "pm.globals.set('activity_level', activity);",
                            "",
                            "var heartRate;",
                            "switch(activity) {",
                            "    case 'resting': heartRate = Math.floor(Math.random() * 21) + 60; break;",
                            "    case 'walking': heartRate = Math.floor(Math.random() * 31) + 80; break;",
                            "    case 'light_exercise': heartRate = Math.floor(Math.random() * 41) + 100; break;",
                            "}",
                            "pm.globals.set('heart_rate', heartRate);",
                            "",
                            "// Genera qualit√† dati e batteria",
                            "var quality = (Math.random() * 0.18 + 0.80).toFixed(2);",
                            "var battery = (Math.random() * 0.80 + 0.20).toFixed(2);",
                            "pm.globals.set('data_quality', quality);",
                            "pm.globals.set('battery_level', battery);",
                            "",
                            "console.log('üíì Inviando HR:', heartRate, 'bpm (', activity, ') - Quality:', quality);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "if (pm.response.code === 200 || pm.response.code === 201) {",
                            "    console.log('üíì Dati battiti cardiaci inviati con successo!');",
                            "    console.log('Heart Rate:', pm.globals.get('heart_rate'), 'bpm');",
                            "    console.log('Activity:', pm.globals.get('activity_level'));",
                            "    console.log('Quality:', pm.globals.get('data_quality'));",
                            "    console.log('üîÑ Puoi ripetere questa richiesta per inviare pi√π dati!');",
                            "} else {",
                            "    console.log('‚ùå Errore invio dati. Status:', pm.response.code);",
                            "    console.log('Response:', pm.response.text());",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "7. üìä Get Twin Status",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/api/v1/digital-twins/{{twin_id}}",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "v1",
                        "digital-twins",
                        "{{twin_id}}"
                    ]
                }
            },
            "event": [
                {
                    "listen": "pre-request",
                    "script": {
                        "exec": [
                            "var twinId = pm.collectionVariables.get('twin_id');",
                            "if (!twinId) throw new Error('twin_id mancante');"
                        ]
                    }
                }
            ]
        },
        {
            "name": "8. üìà Get Data Quality Report",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/api/v1/replicas/{{replica_id}}/data/quality?time_range=3600",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "v1",
                        "replicas",
                        "{{replica_id}}",
                        "data",
                        "quality"
                    ],
                    "query": [
                        {
                            "key": "time_range",
                            "value": "3600"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "pre-request",
                    "script": {
                        "exec": [
                            "var replicaId = pm.collectionVariables.get('replica_id');",
                            "if (!replicaId) throw new Error('replica_id mancante');"
                        ]
                    }
                }
            ]
        },
        {
            "name": "üö™ LOGOUT",
            "request": {
                "method": "POST",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/api/v1/auth/logout",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "v1",
                        "auth",
                        "logout"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// Pulisce tutti i token",
                            "pm.collectionVariables.set('access_token', '');",
                            "console.log('üö™ Logout completato. Token rimosso.');"
                        ]
                    }
                }
            ]
        }
    ]
}